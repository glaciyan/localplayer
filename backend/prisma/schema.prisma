generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------
// Base Models for Basic functionality
// ---------------------------------------------

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  passwordHash String
  Sessions     AuthSession[]
  Profiles     Profile[]
}

model AuthSession {
  id         Int      @id @default(autoincrement())
  secureId   String   @unique
  user       User     @relation(fields: [username], references: [username])
  username   String
  validUntil DateTime
}

// ---------------------------------------------
// LocalPlayer Models
// ---------------------------------------------

model MapPresence {
  id        Int         @id @default(autoincrement())
  Profile   Profile[]
  LPSession LPSession[]

  latitude  Decimal
  longitude Decimal
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  owner   User @relation(fields: [ownerId], references: [id])
  ownerId Int

  displayName String
  biography   String

  presenceId Int
  presence   MapPresence @relation(fields: [presenceId], references: [id])

  sessionsMade         LPSession[]
  sessionParticipating LPSessionParticipation[]
  swipesMade           Swipe[]                  @relation("swipesMade")
  swipesReceived       Swipe[]                  @relation("swipesReceived")
}

model LPSessionParticipation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  participantId Int
  participant   Profile @relation(fields: [participantId], references: [id])

  sessionId Int
  session   LPSession @relation(fields: [sessionId], references: [id])

  @@unique([participantId, sessionId])
}

model LPSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  creator   Profile @relation(fields: [creatorId], references: [id])
  creatorId Int

  presenceId Int
  presence   MapPresence @relation(fields: [presenceId], references: [id])

  status       String
  participants LPSessionParticipation[]
}

model LPSessionRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  // TODO
}

model Swipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  swiperId Int
  swiper   Profile @relation("swipesMade", fields: [swiperId], references: [id])

  swipeeId Int
  swipee   Profile @relation("swipesReceived", fields: [swipeeId], references: [id])

  @@unique([swiperId, swipeeId])
}
